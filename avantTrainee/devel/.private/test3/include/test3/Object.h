// Generated by gencpp from file test3/Object.msg
// DO NOT EDIT!


#ifndef TEST3_MESSAGE_OBJECT_H
#define TEST3_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test3
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : distancia(0)
    , intececao(0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : distancia(0)
    , intececao(0)  {
  (void)_alloc;
    }



   typedef int64_t _distancia_type;
  _distancia_type distancia;

   typedef int64_t _intececao_type;
  _intececao_type intececao;





  typedef boost::shared_ptr< ::test3::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test3::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::test3::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::test3::Object > ObjectPtr;
typedef boost::shared_ptr< ::test3::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test3::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test3::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test3::Object_<ContainerAllocator1> & lhs, const ::test3::Object_<ContainerAllocator2> & rhs)
{
  return lhs.distancia == rhs.distancia &&
    lhs.intececao == rhs.intececao;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test3::Object_<ContainerAllocator1> & lhs, const ::test3::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test3::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test3::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test3::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test3::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test3::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test3::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test3::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9aa705419f72eab546bba9df933a66db";
  }

  static const char* value(const ::test3::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9aa705419f72eab5ULL;
  static const uint64_t static_value2 = 0x46bba9df933a66dbULL;
};

template<class ContainerAllocator>
struct DataType< ::test3::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test3/Object";
  }

  static const char* value(const ::test3::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test3::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 distancia\n"
"int64 intececao\n"
;
  }

  static const char* value(const ::test3::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test3::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distancia);
      stream.next(m.intececao);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test3::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test3::Object_<ContainerAllocator>& v)
  {
    s << indent << "distancia: ";
    Printer<int64_t>::stream(s, indent + "  ", v.distancia);
    s << indent << "intececao: ";
    Printer<int64_t>::stream(s, indent + "  ", v.intececao);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST3_MESSAGE_OBJECT_H
